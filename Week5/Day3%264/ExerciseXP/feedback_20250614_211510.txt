URL: https://github.com/Hadriellamy/DI_BOOTCAMP/blob/main/Week5/Day3%264/ExerciseXP/exercice1%262.sql
suggestions for improvement:
- In Exercise 1,  specify the table names (items and customers) in the code comments to improve clarity.  For example, instead of `#All items, ordered by price (lowest to highest).`, use `#All items from the 'items' table, ordered by price (lowest to highest).`
- In Exercise 2,  add comments to each query explaining what the query is doing, what tables are involved, and what the result represents.  This will make the code much easier to understand for others (or your future self).
- Exercise 2, Question 6: The query assumes a 'district' column exists in the 'address' table. It should explicitly state this assumption in a comment and handle the possibility that the 'district' column might not exist or might have null values.
- Exercise 2, Question 11: While both solutions (OFFSET/FETCH and subquery with ROW_NUMBER) work,  consider which one is more portable across different SQL dialects.  The subquery method using window functions is more standard, but `OFFSET/FETCH` might be slightly more performant in some specific PostgreSQL configurations.  Add a comment explaining the chosen approach and its implications.
- Exercise 2, Question 13: The query to find movies not in inventory is correct but could be optimized by using a `LEFT JOIN` instead of `NOT IN`. A `LEFT JOIN` is generally more efficient than `NOT IN` with subqueries, especially with larger datasets.  It is also less susceptible to unexpected behavior when `inventory.film_id` contains NULL values.
- Consider adding error handling (try-catch blocks or equivalent in your SQL environment) where applicable in case tables or columns don't exist. This would prevent unexpected crashes.
Brief justification:
- correctness: The code correctly answers almost all questions posed in both exercises. The queries accurately reflect the instructions given in terms of selecting columns, ordering, filtering, and joining tables.  The minor deduction is due to the assumption of column existence in Exercise 2, Question 6 and the potential for optimization in Question 13. The code directly addresses the requirements of the chapter content concerning basic SQL queries and database operations (SELECT, WHERE, ORDER BY, JOIN, LIMIT, OFFSET).
- readability: The code is reasonably readable. The queries are generally well-structured and easy to follow. However, adding more detailed comments and specifying table names in comments would significantly improve readability and make the code easier to understand. The lack of comprehensive comments makes following the reasoning behind each query slightly difficult.
- performance: The performance of the queries is generally good for the tasks at hand. However, some queries (specifically Exercise 2, Question 13) could be optimized for better performance with larger datasets by using more efficient techniques like LEFT JOIN instead of NOT IN with subqueries. The `OFFSET` clause can become slow with large datasets for Question 11.
- security: The code does not contain any apparent security vulnerabilities. It simply performs database queries, and there's no user input or any other aspect that introduces security risks.  The provided code focuses purely on data retrieval and does not expose any sensitive operations or data.

